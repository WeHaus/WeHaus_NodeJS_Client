'use strict';

const rest = require('restler'), EventEmitter = require('events');

class Wehaus {

  constructor(config) {
    const defaults = { 
      host: 'http://dev.patagoniclabs.com'
    }
    this.config = Object.assign(config, defaults);
  }

  get_token(email, password) {
    let this_ = this;

    rest.postJson( 
        this.config.host + '/users/sign_in',
        {user: {email: email, password: password, remember_me: 1}},
        {headers: this.default_headers()}

      ).on('complete',function(data, response){
        this_.config.token = data.authentication_token;
        this_.config.email = email;
        console.log('Got token '+this_.config.token+' for email '+this_.config.email);
      });
  }

  get_mac_address() {
    const exec = require('child_process').exec;
    exec("ifconfig | grep -Po \"HWaddr [a-f0-9:]+\" | head -n 1 | cut -d ' ' -f 2 | sed \"s/://g\"", (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      console.log("Got Mac Address "+stdout);
      this.config.mac = stdout;
    });
  }

  auth_headers() {
    if ( typeof this.config.token === 'undefined' ) {
      console.error('No token configured');
    } else {
      return { "X-User-Email": this.config.email, "X-User-Token": this.config.token };
    }
  }

  default_headers() {
    return {'Accept': 'application/json'};
  }

  full_headers() {
    return Object.assign(this.auth_headers(), this.default_headers());
  }

  send_value(device, value) {
    rest.putJson(
        this.api_url('device/' + device.get_api_id()),
        { data: {value: value}, headers: this.full_headers() })
      .on('complete', function(data, response) {
        console.log('success');
      });
  }

  get_devices() {
    rest.get(this.api_url('devices'), 
        {headers: this.full_headers()})
      .on('complete', function(data, response) {
        this.devices = data.map(function(d) { return { id: d.id, type: d.type, endpoint: d.endpoint, status: d.text_status }; });
        console.log(this.devices);
    });
  }

  api_url(path) {
    return this.config.host + '/api/v2/' + path;
  }
}

class Device extends EventEmitter {
  constructor(w, endpoint) {
    this.Wehaus = w;
    this.endpoint = endpoint;
  }
}

class DataDevice extends Device {
  send_value(value) {
    this.Wehaus.send_value(self, value);
  }
}

class SensorDevice extends DataDevice {}

class AlarmDevice extends DataDevice {}


class ActionDevice extends Device {}

class ToggableDevice extends ActionDevice {
  on() {
  }

  off() {
  }
}

class LevelDevice extends ToggableDevice {
  constructor(w, e) {
    const min_level = 0, max_level = 255;
    super(w, e);
  }

  on() {
    set_level(max_level);
  }

  off() {
    set_level(min_level);
  }

  set_level(level) {
  }
}


module.exports.Wehaus = Wehaus;
module.exports.Sensor = SensorDevice;
