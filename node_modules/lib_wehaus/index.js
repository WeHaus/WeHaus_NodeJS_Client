'use strict';

const rest = require('restler'), EventEmitter = require('events');

class Wehaus extends EventEmitter {

  constructor(config) {
    super();
    const defaults = { 
      host: 'http://dev.patagoniclabs.com'
    }
    this.config = Object.assign(defaults, config);
    this.modules = [];
    this.pending_modules = [];
    this.devices = [];
    this.pending_devices = [];
  }

  get_token(email, password) {
    let this_ = this;

    rest.postJson( 
        this.config.host + '/users/sign_in',
        {user: {email: email, password: password}},
        {headers: this.default_headers()} )

      .on('success',function(data, response){
        this_.config.token = data.authentication_token;
        this_.config.email = email;
        console.log('Got token '+this_.config.token+' for email '+this_.config.email);
        this_.emit('ready'); })

      .on('fail',this.catch_error);
  }

  get_mac_address() {
    const exec = require('child_process').exec;
    let this_ = this;
	if(process.platform == 'linux'){
	  exec("ifconfig | grep -Po \"(HWaddr|ether) [a-f0-9:]+\" | head -n 1 | cut -d ' ' -f 2 | sed \"s/://g\"", (e, out, err) => {
      if (e) {
        console.error(`exec error: ${e}`);
        return;
      }
      out = out.trim();
      console.log("Got Mac Address "+out);
      this_.config.mac = out;
	  });
	} else if (process.platform == 'win32') {
	  let out = require('os').networkInterfaces()["Wi-Fi"][0].mac.trim();
	  console.log("Got Mac Address "+out);
	  this_.config.mac = out;
	}
  }

  catch_error(e) {
    console.error(e);
  }

  api_url(path) {
    return this.config.host + '/api/v2/' + path;
  }

  auth_headers() {
    if ( typeof this.config.token === 'undefined' ) {
      throw new Error('No token configured');
    } else {
      return { "X-User-Email": this.config.email, "X-User-Token": this.config.token };
    }
  }

  default_headers() {
    return {'Accept': 'application/json'};
  }

  full_headers() {
    return Object.assign(this.auth_headers(), this.default_headers());
  }


  send_value(device, value) {
    rest.putJson(
        this.api_url('device/' + device.get_api_id() + '/data'),
        {value: value},
        {headers: this.full_headers()})

      .on('success', function(data, response) {
        console.log('success'); })

      .on('fail',this.catch_error);
  }


/* DEVICES */
  check_device_status() {
    if (this.pending_devices.length == 0) {
      this.emit('device-ready');
    }
  }

  exist_device(endpoint) {
    return (this.devices.filter((d) => { return (d.endpoint == endpoint) }).length > 0);
  }

  get_devices() {
    let this_ = this;
    console.log(this.api_url('devices'));
    rest.get(this.api_url('devices'), 
        {headers: this.full_headers()})

      .on('success', (data, response) => {
        this_.devices = data.filter((d) => {
          return (d.remote_status.address == this_.config.mac);
        }).map((d) => {
          return { id: d.id, primitive: d.primitive, endpoint: d.endpoint, status: d.text_status }; 
        });
        console.log('Got device list',this.devices);
        this_.emit('ready-devices'); })

      .on('fail',this.catch_error);
  }

  get_device_by_endpoint(endpoint) {
    let d = this.devices.filter((d) => {
      return (d.endpoint == endpoint);
    });
    if (d.length == 0) {
      console.error('Endpoint does not exist');
    } else {
      return d.shift();
    }
    return false;
  }

  create_device(type, endpoint) {
    let module = this.get_module_by_mac(this.config.mac);
    this.pending_devices.push('creating_device');
    let this_ = this;
    console.log(this.api_url('module/'+module.id+'/create_device'));
    rest.postJson(
        this.api_url('module/'+module.id+'/create_device'),
        {type: type, endpoint: endpoint},
        {headers: this.full_headers()})

      .on('success', function(data, response) {
        console.log('Device created', data);

        this_.devices.push({ id: data.id, primitive: data.primitive, endpoint: data.endpoint, status: data.text_status });
        this_.pending_devices.shift();
        this_.check_device_status();
      })

      .on('fail',this.catch_error);
  }

/* MODULES */
  check_module_status() {
    if (this.pending_modules.length == 0) {
      this.emit('module-ready');
    }
  }

  exist_module(code) {
    return (this.modules.filter((m) => { return m.code == code }).length > 0);
  }

  get_modules() {
    let this_ = this
    console.log(this.api_url('modules'))
    rest.get(this.api_url('modules'), 
        {headers: this.full_headers()})

      .on('success', (data, response) => {
        this_.modules = data.map((d) => {
          return { id: d.id, code: d.code }; 
        });
        console.log('Got module list',this_.modules);
        this_.emit('ready-modules'); })

      .on('fail',this.catch_error);
  }

  create_module(code) {
    this.pending_modules.push('creating-module');
    let this_ = this;
    rest.postJson(
        this.api_url('create_module'),
        {code: code},
        {headers: this.full_headers()})

      .on('success', function(data, response) {
        this_.modules.push({id: data.id, code: data.code});
        console.log('Module created',data); 
        this_.pending_modules.shift();
        this_.check_module_status(); })

      .on('fail',this.catch_error);
  }

  get_devices_and_modules() {
    this.get_modules();
    this.on('ready-modules', () => {
      this.get_devices();
      this.on('ready-devices', () => {
        this.emit('ready');
      });
    });
  }

  get_module_by_mac(code) {
    return this.modules.filter((m) => { return (m.code == code); })[0];
  }
}

class Device extends EventEmitter {
  constructor(w, endpoint) {
    super();
    this.Wehaus = w;
    this.endpoint = endpoint;
    let d = this.Wehaus.get_device_by_endpoint(endpoint);
    if ( !d ) { throw new Error('Device not found'); }
    console.log('Found device: ', d);
    this.id = d.id;
    this.device = d;
  }

  get_api_id() {
    return this.id;
  }
}

class DataDevice extends Device {
  constructor(w,e) {
    super(w,e);
    this.on('data',this.send_value);
    this.primitive = 'DataDevice';
    if ( this.primitive != this.device.primitive ) { throw new Error('Device has the wrong type for the endpoint'); }
  }

  send_value(value) {
    this.Wehaus.send_value(this, value);
  }
}

class SensorDevice extends DataDevice {}

class AlarmDevice extends DataDevice {}


class ActionDevice extends Device {
  constructor(w,e) {
    super(w,e);
    this.primitive = 'ActionDevice';
    if ( this.primitive != this.device.primitive ) { throw new Error('Device has the wrong type for the endpoint'); }
  }
}

class ToggableDevice extends ActionDevice {
  on() {
  }

  off() {
  }
}

class LevelDevice extends ToggableDevice {
  constructor(w, e) {
    const min_level = 0, max_level = 255;
    super(w, e);
  }
  on() {
    set_level(max_level);
  }

  off() {
    set_level(min_level);
  }

  set_level(level) {
  }
}

module.exports.Wehaus = Wehaus;
module.exports.SensorDevice = SensorDevice;
